# This workflow will deploy a kustomize overlay to a kubernetes cluster.

name: Deploy

on:
  workflow_dispatch:
    inputs:
      overlay:
        description: "The overlay to use for kustomize"
        required: true
        type: string
      tag:
        description: "The image tag to deploy"
        required: true
        type: string
      cluster_name:
        description: "The cluster name"
        required: true
        type: string
      cluster_zone:
        description: "The cluster zone"
        required: true
        type: string
  workflow_call:
    inputs:
      overlay:
        description: "The overlay to use for kustomize"
        required: true
        type: string
      tag:
        description: "The image tag to deploy"
        required: true
        type: string
      cluster_name:
        description: "The cluster name"
        required: true
        type: string
      cluster_zone:
        description: "The cluster zone"
        required: true
        type: string
      ref:
        description: "The git ref to use"
        required: false
        type: string

jobs:
  deploy:
    permissions:
      contents: "write"
      id-token: "write"
    runs-on: ubuntu-latest
    env:
      NAME: "theservicename"
      IMAGE: "me-west1-docker.pkg.dev/koala-ops-demo-373407/koala-repo/theservicename"
      DEPLOYMENT_FILE: deploy/base/deployment.yaml
      MANAGED_BY: ""

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          

      - name: Print inputs
        run: |
          echo "Deploy workflow received input, overlay: ${{ inputs.overlay }}, tag: ${{ inputs.tag }}, cluster_name: ${{ inputs.cluster_name }}, cluster_zone: ${{ inputs.cluster_zone }}"

      # Authenticate via credentials json
      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ inputs.cluster_name }}
          location: ${{ inputs.cluster_zone }}

      # Verify input overlay exists in repo
      - name: Verify input overlay exists in repo
        uses: andstor/file-existence-action@v2
        with:
          files: deploy/overlays/${{ inputs.overlay }}/kustomization.yaml

      # Update the image tag and version label in the kustomize overlay
      - name: Update image tag in Kustomize overlay
        run: |-
          cd deploy/overlays/${{ inputs.overlay }}
          kustomize edit set image $IMAGE:${{ inputs.tag }}
          sed -i "s/app.kubernetes.io\/version:.*/app.kubernetes.io\/version: ${{ inputs.tag }}/g" kustomization.yaml
          kustomize edit set annotation last-deployed-by:${{ github.actor }}
          NAMESPACE=$(cat kustomization.yaml | grep namespace: | cut -d ":" -f 2 | tr -d '[:space:]')
          FULLNAME="$(cat kustomization.yaml | grep namePrefix: | cut -d ":" -f 2 | tr -d '[:space:]')$NAME"
          echo "NAMESPACE: $NAMESPACE"
          echo "FULLNAME: $FULLNAME"
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          echo "FULLNAME=$FULLNAME" >> $GITHUB_ENV

      - name: Check for "managed-by" label
        id: check-managed-by-label
        run: |-
          MANAGED_BY=$(kubectl get deployments/$FULLNAME -n $NAMESPACE -o jsonpath='{.metadata.labels.app\.kubernetes\.io/managed-by}') || MANAGED_BY=""
          echo "MANAGED_BY=$MANAGED_BY" >> $GITHUB_ENV

      # If using GitOps with ArgoCD, push the new tag to the repo and allow ArgoCD to handle deployment
      - name: Push new tag to repo
        if: env.MANAGED_BY == 'argocd'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update env '${{ inputs.overlay }}' to version '${{ inputs.tag }}' [skip ci]
          commit_user_name: GitHub Actions Bot
          file_pattern: deploy/

      # If not using GitOps, deploy the kustomize overlay to the cluster
      - name: Deploy overlay to cluster
        if: env.MANAGED_BY != 'argocd'
        run: |-
          echo "Using kubectl to deploy new tag '${{ inputs.tag }}' to cluster in env '${{ inputs.overlay }}'"
          kubectl kustomize deploy/overlays/${{ inputs.overlay }} | kubectl apply -f -
          kubectl wait --timeout=120s --for=condition=ready pod -l app=$NAME -n $NAMESPACE
          kubectl describe deployments -l app=$NAME -n $NAMESPACE
